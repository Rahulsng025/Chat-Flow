{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.component.ts","webpack:///src/app/app.module.ts","webpack:///src/app/authentication/login/login.component.html","webpack:///src/app/authentication/login/login.component.ts","webpack:///src/app/authentication/profile/profile.component.ts","webpack:///src/app/authentication/register/register.component.html","webpack:///src/app/authentication/register/register.component.ts","webpack:///src/app/chat/chat.component.html","webpack:///src/app/chat/chat.component.ts","webpack:///src/app/gaurds/auth-gaurd.guard.ts","webpack:///src/app/service/auth.service.ts","webpack:///src/app/service/chat.service.ts","webpack:///src/app/service/validate.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts","webpack:///ws (ignored)"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","AppRoutingModule","AppComponent","_chatService","messageArray","newUserJoined","subscribe","data","push","userLeftRoom","newMessageReceived","joinRoom","user","room","leaveRoom","sendMessage","message","messageText","path","component","canActivate","redirectTo","pathMatch","autoLogin","providers","PROVIDER_ID","provider","AppModule","LoginComponent","_authService","router","_flashMessageService","_socialAuthService","http","afAuth","username","password","authenticateUser","success","storeUserData","token","show","cssClass","timeout","navigate","msg","console","log","ProfileComponent","getProfile","profile","err","RegisterComponent","_validateService","name","email","validateRegister","validateEmail","registerUser","ChatComponent","logout","signOut","AuthGaurdGuard","loggedIn","AuthService","headers","append","post","loadToken","authToken","get","localStorage","setItem","JSON","stringify","getItem","clear","ChatService","socket","emit","observable","observer","on","next","discconect","disconnect","ValidateService","undefined","re","test","String","toLowerCase","environment","production","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent } from './authentication/login/login.component';\nimport { RegisterComponent } from './authentication/register/register.component';\n\n\n const routes: Routes = [\n\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","<flash-messages></flash-messages>\n<router-outlet></router-outlet>\n","import { Component } from '@angular/core';\nimport { ChatService } from './service/chat.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n\n  user:String;\n  room:String;\n  messageText:String;\n  messageArray:Array<{user:String,message:String}> = [];\n\n  constructor(private _chatService:ChatService){\n    // For receving messages\n    // After all we are using observables, So we'have to subscribe to this particular method of a service\n    this._chatService.newUserJoined()\n    .subscribe(data=> this.messageArray.push(data));\n\n      this._chatService.userLeftRoom()\n      .subscribe(data=>this.messageArray.push(data));\n\n      this._chatService.newMessageReceived()\n      .subscribe(data=>this.messageArray.push(data));\n\n  }\n\n  join(){\n    this._chatService.joinRoom({user:this.user, room:this.room});\n}\n\nleave(){\n    this._chatService.leaveRoom({user:this.user, room:this.room});\n}\n\nsendMessage()\n{\n    this._chatService.sendMessage({user:this.user, room:this.room, message:this.messageText});\n}\n\n\n \n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms'\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { AuthComponent } from './authentication/auth/auth.component';\nimport { LoginComponent } from './authentication/login/login.component';\nimport { RegisterComponent } from './authentication/register/register.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ChatComponent } from './chat/chat.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AuthService } from './service/auth.service';\nimport { ValidateService } from './service/validate.service';\nimport { FlashMessagesModule } from 'flash-messages-angular';\nimport { ProfileComponent } from './authentication/profile/profile.component';\nimport { AuthGaurdGuard } from './gaurds/auth-gaurd.guard';\nimport { SocialLoginModule, SocialAuthServiceConfig } from 'angularx-social-login';\nimport {\n  GoogleLoginProvider,\n  FacebookLoginProvider\n} from 'angularx-social-login';\n\n// FireBase Google Login\nimport { AngularFireModule } from '@angular/fire';\nimport { AngularFireAuthModule } from '@angular/fire/auth';\nimport { environment } from 'src/environments/environment';\n\nconst routes: Routes = [\n  {path: 'login', component: LoginComponent},\n  {path: 'register', component:RegisterComponent },\n  {path: 'chat', component: ChatComponent, canActivate: [AuthGaurdGuard]},\n  {path: 'profile', component: ProfileComponent},\n  {path:'', redirectTo: '/login', pathMatch: 'full'}\n]\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    AuthComponent,\n    LoginComponent,\n    RegisterComponent,\n    ChatComponent,\n    ProfileComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    RouterModule.forRoot(routes),\n    FlashMessagesModule.forRoot(),\n    HttpClientModule,\n    SocialLoginModule,\n    AngularFireModule.initializeApp(environment.firebaseConfig),\n    AngularFireAuthModule\n  \n  ],\n  providers: [ValidateService, AuthService, AuthGaurdGuard,\n    {\n      provide: 'SocialAuthServiceConfig',\n      useValue: {\n        autoLogin: false,\n        providers: [\n          {\n            id: GoogleLoginProvider.PROVIDER_ID,\n            provider: new GoogleLoginProvider(\n              '800596385766-dj3knbe81phidod2655ldo5iplmhos27.apps.googleusercontent.com'\n            )\n          },\n          // {\n          //   id: FacebookLoginProvider.PROVIDER_ID,\n          //   provider: new FacebookLoginProvider('clientId')\n          // }\n        ]\n      } as SocialAuthServiceConfig,\n    }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","<body>\n  <img class=\"wave\" src=\"../../../assets/wave.png\" />\n  <div class=\"login-wrapper\">\n    <div class=\"img\">\n      <img src=\"../../../assets/bg.svg\" />\n    </div>\n    <div class=\"login-content\">\n      <form (submit)=\"onLoginSubmit()\" action=\"\" class=\"form\">\n        <img src=\"../../../assets/avatar.svg\" alt=\"\" />\n        <h2 class=\"title\">Login</h2>\n\n        <div class=\"input-group\">\n          <input\n            type=\"text\"\n            [(ngModel)]=\"username\"\n            name=\"username\"\n            id=\"username\"\n            required\n          />\n          <label for=\"username\">Username</label>\n        </div>\n        <div class=\"input-group\">\n          <input\n            type=\"password\"\n            [(ngModel)]=\"password\"\n            name=\"password\"\n            id=\"password\"\n            required\n          />\n          <label for=\"password\">Password</label>\n        </div>\n        <input type=\"submit\" value=\"Login\" class=\"btn\" />\n        <a class=\"forgot-pw\">Don't have account?</a> <br />\n        <!-- Google login logo-->\n        <div class=\"google-login\">\n          <button class=\"btn btn-success\" (click)=\"signInWithGoogle()\">\n            Google\n          </button>\n        </div>\n      </form>\n    </div>\n  </div>\n</body>\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../../service/auth.service';\nimport { FlashMessagesService } from 'flash-messages-angular';\nimport { SocialUser, GoogleLoginProvider } from 'angularx-social-login';\nimport { SocialAuthService } from 'angularx-social-login';\nimport { HttpClient } from '@angular/common/http';\n// Firebase\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport firebase from 'firebase/app';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  username: String;\n  password: String;\n  email:String;\n  user: SocialUser | null;\n  GoogleAuth : String; // Google Auth object.\n  gapi: any;\n\n  constructor(private _authService: AuthService, \n    private router:Router,\n    private _flashMessageService: FlashMessagesService,\n    private _socialAuthService: SocialAuthService,\n    private http: HttpClient,\n    public afAuth: AngularFireAuth) { }\n\n  ngOnInit(): void { \n  }\n\n  onLoginSubmit(){\n    const user = {\n      username: this.username,\n      password: this.password\n    }\n    this._authService.authenticateUser(user).subscribe(data => {\n      if(data.success){\n        this._authService.storeUserData(data.token, data.user)\n        this._flashMessageService.show('You are now logged in!', { cssClass: 'alert-success', timeout: 3000 })\n        this.router.navigate(['chat']);\n      }\n      else{\n        this._flashMessageService.show(data.msg, { cssClass: 'alert-success', timeout: 3000 });\n        this.router.navigate(['login']);\n      }\n      console.log(data);\n    })\n  }\n\n  signInWithGoogle(): any{\n  //   this._socialAuthService.signIn(GoogleLoginProvider.PROVIDER_ID).then(\n  //   (user) => {\n  //       this.router.navigate(['chat']);\n  //     this._authService.googleSignIn(user.idToken).subscribe(\n  //      (res)=> {\n  //        console.log(res)\n  //       },\n  //       (err) => {\n  //         console.log(err)\n  //       }\n  //     )\n  //   console.log()\n      \n  //  })\n  // const googleAuthProvider = new firebase.auth.GoogleAuthProvider();\n  // this.afAuth.signInWithPopup(googleAuthProvider);\n  // this.router.navigate(['chat']);\n     }\n\n    //  signOut() {\n    //    this.afAuth.signOut();\n    //  }\n\n    \n  }\n\n\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/service/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.scss']\n})\nexport class ProfileComponent implements OnInit {\n  user: Object;\n  constructor(private _authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    this._authService.getProfile().subscribe(profile => {\n      this.user = profile.user\n    }, \n    err => {\n      console.log(err);\n      return false;\n    })\n  }\n\n}\n","<body>\n  <img class=\"wave\" src=\"../../../assets/wave.png\" />\n  <div class=\"login-wrapper\">\n    <div class=\"img\">\n      <img src=\"../../../assets/bg.svg\" />\n    </div>\n    <div class=\"login-content\">\n      <form (submit)=\"onRegister()\" action=\"\" class=\"form\">\n        <img src=\"../../../assets/avatar.svg\" alt=\"\" />\n        <h2 class=\"title\">Register</h2>\n        <div class=\"input-group\">\n          <input\n            type=\"text\"\n            id=\"name\"\n            [(ngModel)]=\"name\"\n            name=\"name\"\n            required\n          />\n          <label for=\"name\">Name</label>\n        </div>\n        <div class=\"input-group\">\n          <input\n            type=\"text\"\n            [(ngModel)]=\"username\"\n            name=\"username\"\n            id=\"username\"\n            required\n          />\n          <label for=\"username\">Username</label>\n        </div>\n        <div class=\"input-group\">\n          <input\n            type=\"text\"\n            [(ngModel)]=\"email\"\n            name=\"email\"\n            id=\"email\"\n            required\n          />\n          <label for=\"email\">Email</label>\n        </div>\n        <div class=\"input-group\">\n          <input\n            type=\"text\"\n            [(ngModel)]=\"password\"\n            name=\"password\"\n            id=\"password\"\n            required\n          />\n          <label for=\"password\">Password</label>\n        </div>\n        <input type=\"submit\" class=\"btn\" value=\"submit\" />\n      </form>\n    </div>\n  </div>\n</body>\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ValidateService } from 'src/app/service/validate.service';\nimport { AuthService } from 'src/app/service/auth.service';\nimport { FlashMessagesService } from 'flash-messages-angular';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n\n  name: string;\n  username: string;\n  email: string;\n  password: string\n\n  constructor(private _authService: AuthService,\n    private _validateService: ValidateService,\n    private router: Router,\n    private _flashMessageService: FlashMessagesService) { }\n\n  ngOnInit(): void {\n  }\n\n  onRegister() {\n    const user = {\n      name: this.name,\n      email: this.email,\n      username: this.username,\n      password: this.password\n    }\n\n    // Validate Register\n    if(!this._validateService.validateRegister(user)){\n      this._flashMessageService.show('Please fill in all fields!', { cssClass: 'alert-danger', timeout: 3000 })\n      return false;\n    }\n    // Validate Email \n    if(!this._validateService.validateEmail(user.email)){\n      this._flashMessageService.show('Please use a valid email!', { cssClass: 'alert-danger', timeout: 3000 })\n      return false;\n    }\n\n    // Register User\n    this._authService.registerUser(user).subscribe(data => {\n      if(data) {\n        this._flashMessageService.show('You are now registered and can now login!', { cssClass: 'alert-success', timeout: 3000 })\n        this.router.navigate(['/login']);\n      }\n      else{\n        this._flashMessageService.show('Something went wrong!', { cssClass: 'alert-danger', timeout: 3000 })\n        this.router.navigate(['/register']);\n      }\n     \n      \n    })\n  }\n\n}\n","<div class=\"container-fluid\">\n  <div class=\"row\">\n    <h2 style=\"margin-left: 550px\">Real Time Chat Application</h2>\n    <hr />\n  </div>\n  <div class=\"row\">\n    <div class=\"col-sm-5\">\n      <div class=\"form-group\">\n        <label for=\"username\">Username</label>\n        <input\n          type=\"text\"\n          [(ngModel)]=\"user\"\n          class=\"form-control\"\n          id=\"username\"\n          placeholder=\"Enter username\"\n        />\n        <!-- <small id=\"userHelp\" class=\"form-text text-muted\">Type your username.</small> -->\n      </div>\n    </div>\n    <div class=\"col-sm-5\">\n      <label for=\"roomInput\">Choose room</label>\n      <select\n        name=\"roomInput\"\n        id=\"roomInput\"\n        class=\"form-control\"\n        [(ngModel)]=\"room\"\n      >\n        <option value=\"Lobby\">Lobby</option>\n        <option value=\"Hall\">Hall</option>\n        <option value=\"Deluxe\">Deluxe</option>\n      </select>\n    </div>\n    <div class=\"col sm-2\">\n      <div style=\"margin-top: 19px\" class=\"pull-right\">\n        <button type=\"button\" class=\"btn btn-primary\" (click)=\"join()\">\n          Join\n        </button>\n        <button type=\"button\" class=\"btn btn-default\" (click)=\"leave()\">\n          Leave\n        </button>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"well\" style=\"height: 200px; padding: 15px\">\n      <div *ngFor=\"let item of messageArray\">\n        <span\n          ><strong>{{ item.user }} : </strong> {{ item.message }}</span\n        >\n      </div>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-sm-10\">\n      <input type=\"text\" class=\"form-control\" [(ngModel)]=\"messageText\" />\n    </div>\n    <div class=\"col-sm-2\">\n      <button\n        type=\"button\"\n        class=\"btn btn-success pull-right\"\n        (click)=\"sendMessage()\"\n      >\n        Send\n      </button>\n    </div>\n    <div class=\"col-sm-2\">\n      <button\n        type=\"button\"\n        class=\"btn btn-success pull-right\"\n        (click)=\"onLogoutClick()\"\n      >\n        Logout\n      </button>\n      <button\n        class=\"btn btn-success\"\n        *ngIf=\"afAuth.authState | async\"\n        (click)=\"signOut()\"\n      >\n        Google\n      </button>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FlashMessagesService } from 'flash-messages-angular';\nimport { AuthService } from '../service/auth.service';\nimport { ChatService } from '../service/chat.service';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport firebase from 'firebase/app';\n\n@Component({\n  selector: 'app-chat',\n  templateUrl: './chat.component.html',\n  styleUrls: ['./chat.component.scss']\n})\nexport class ChatComponent implements OnInit {\n\n  user:String;\n  room:String;\n  messageText:String;\n  messageArray:Array<{user:String,message:String}> = [];\n\n  constructor(private _chatService:ChatService,\n    private _authService: AuthService,\n    private router: Router,\n    private _flashMessageService: FlashMessagesService,\n    public afAuth: AngularFireAuth) {\n     // For receving messages\n    // After all we are using observables, So we'have to subscribe to this particular method of a service\n    this._chatService.newUserJoined()\n    .subscribe(data=> this.messageArray.push(data));\n\n      this._chatService.userLeftRoom()\n      .subscribe(data=>this.messageArray.push(data));\n\n      this._chatService.newMessageReceived()\n      .subscribe(data=>this.messageArray.push(data));\n   }\n\n  ngOnInit(): void {\n  }\n\n  join(){\n    this._chatService.joinRoom({user:this.user, room:this.room});\n}\n\nleave(){\n    this._chatService.leaveRoom({user:this.user, room:this.room});\n}\n\nsendMessage()\n{\n    this._chatService.sendMessage({user:this.user, room:this.room, message:this.messageText});\n}\n\nonLogoutClick() {\n  this._authService.logout();\n  this._flashMessageService.show('You are logged out', {\n    cssClass: 'alert-success', timeout: 3000\n  });\n  this.router.navigate(['/login']);\n  return false;\n}\n\nsignOut() {\n  this.afAuth.signOut();\n  this.router.navigate(['/login']);\n}\n\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AuthService } from '../service/auth.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGaurdGuard implements CanActivate {\n  constructor(private _authService: AuthService, private router: Router) {}\n\n  canActivate(): boolean {\n    if (this._authService.loggedIn()) {\n      return true;\n    } else {\n      this.router.navigate(['login']);\n      return false;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http'\nimport { Observable } from 'rxjs';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  authToken: any;\n  user: any;\n  \n  constructor(private http: HttpClient) { }\n\n// Register User\nregisterUser(user):Observable<any>{\n  let headers = new HttpHeaders();\n  headers.append('Content-Type', 'application/json');\n  return this.http.post('user/register', user, {headers: headers})\n  \n}\n\n// Authenticate User\nauthenticateUser(user: {username: String; password: String}):Observable<any>{\n  let headers = new HttpHeaders();\n  headers.append('Content-Type', 'application/json');\n  return this.http.post('user/authenticate', user, { headers: headers })\n}\n\n// Get User Profile\ngetProfile():Observable<any>{\n  let headers = new HttpHeaders();\n  this.loadToken();\n  headers.append('Authorization', this.authToken);\n  headers.append('Content-Type', 'application/json');\n  return this.http.get('user/profile', { headers: headers })\n}\n\n// Store User Token\nstoreUserData(token, user){\n  localStorage.setItem('id_token', token);\n  localStorage.setItem('user', JSON.stringify(user));\n  this.authToken = token;\n  this.user = user;\n}\n\n// Load Token ID\nloadToken(){\n  const token = localStorage.getItem('id_token');\n  this.authToken = token;\n}\n\n// Login Method\nloggedIn() {\n  return !!localStorage.getItem('id_token'); // !!Return either true or false\n}\n\n// Logout Method\nlogout(){\n  this.authToken = null;\n  this.user = null;\n  localStorage.clear();\n}\n\n// Sign In With Google\n// googleSignIn(idToken){\n//  return this.http.post<any>(`https://identitytoolkit.googleapis.com/v1/accounts:signInWithIdp?key=${AIzaSyA9hFskOR5PZ975xfRmYil60pZtYOqPAMQ}`, {\n//   postBody:`id_token=${idToken}&providerId=[google.com]`,\n//   requestUri:`http://localhost:4200`,\n//   returnIdpCredential:true,\n//   returnSecureToken:true\n//  })\n//  }\n}\n","import { Injectable } from '@angular/core';\nimport {Observable } from 'rxjs';\nimport * as io from 'socket.io-client'\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChatService {\n  authToken: any;\n  user:any\n \n  constructor( ) { }\n\n  // Connection establised \n  // io socket is listening on the same socket where hhtp server in runnig on 3000\n  // private socket = io('http://localhost:3000');\n  private socket = io();\n\n  \n  joinRoom(data) {\n    this.socket.emit('join', data);\n  }\n\n  newUserJoined() {\n    let observable = new Observable<{user:string, message:string}>(observer => {\n      this.socket.on('new user joined', (data)=> {\n        observer.next(data);\n      });\n      return () => {this.socket.discconect();\n      }\n    })\n    return observable;\n  }\n\n  leaveRoom(data) {\n    this.socket.emit('leave', data);\n  }\n\n  userLeftRoom() {\n    let observable = new Observable<{user: String, message: String}>(observer => {\n        this.socket.on('left room', (data)=> {\n          observer.next(data);\n        });\n        return () => {this.socket.disconnect();}\n    });\n    return observable;\n  }\n\n  sendMessage(data) {\n    this.socket.emit('message', data);\n  }\n\n  newMessageReceived() {\n    let observable = new Observable<{user: String, message: String}>(observer => {\n      this.socket.on('new message', (data)=> {\n        observer.next(data);\n      });\n      return () => {this.socket.disconnect();}\n  });\n\n  return observable;\n}\n\n}\n\n\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidateService {\n\n  constructor() { }\n\n  \n// Validate register\nvalidateRegister(user){\n  if(user.name == undefined || user.email == undefined || user.username == undefined || user.password == undefined) {\n    return false;\n  }\n  else {\n    return true\n  }\n}\n\n// Validate email\nvalidateEmail(email) {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n}\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  firebaseConfig: {\n  apiKey: \"AIzaSyA9hFskOR5PZ975xfRmYil60pZtYOqPAMQ\",\n  authDomain: \"chat-flow-325406.firebaseapp.com\",\n  projectId: \"chat-flow-325406\",\n  storageBucket: \"chat-flow-325406.appspot.com\",\n  messagingSenderId: \"800596385766\",\n  appId: \"1:800596385766:web:aba3128e23e57453f58027\",\n  measurementId: \"G-D9JY2NZ5C5\"\n  }\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","/* (ignored) */"]}